generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  userId       String   @unique // short, user-facing id (e.g., 7-12 chars)
  name         String
  email        String   @unique
  passwordHash String
  isAdmin      Boolean  @default(false)
  avatarUrl    String?  @db.VarChar(2048)
  bio          String?  @db.Text
  interests    String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts        Post[]
  comments     Comment[]
  likes        Like[]
  sentRequests FriendRequest[] @relation("sentRequests")
  recvRequests FriendRequest[] @relation("recvRequests")
  conversationsA Conversation[] @relation("A")
  conversationsB Conversation[] @relation("B")
  messagesSent   Message[]      @relation("messagesSent")
  messagesRecv   Message[]      @relation("messagesRecv")
  progress       ProgressEntry[]
  activities     ActivityLog[]
  aggregates     AggregatedStats[]
  refreshTokens  RefreshToken[]
}

model FriendRequest {
  id         String   @id @default(uuid())
  sender     User     @relation("sentRequests", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("recvRequests", fields: [receiverId], references: [id])
  receiverId String
  status     RequestStatus @default(pending)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum RequestStatus {
  pending
  accepted
  declined
}

model Post {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String   @db.Text
  mediaUrl  String?  @db.VarChar(2048)
  createdAt DateTime @default(now())
  likeCount Int      @default(0)

  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Conversation {
  id        String   @id @default(uuid())
  a         User     @relation("A", fields: [aId], references: [id])
  aId       String
  b         User     @relation("B", fields: [bId], references: [id])
  bId       String
  createdAt DateTime @default(now())

  messages  Message[]
  @@unique([aId, bId])
}

model Message {
  id             String   @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User     @relation("messagesSent", fields: [senderId], references: [id])
  senderId       String
  receiver       User     @relation("messagesRecv", fields: [receiverId], references: [id])
  receiverId     String
  content        String   @db.Text
  createdAt      DateTime @default(now())
  read           Boolean  @default(false)
}

model ProgressEntry {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  date          DateTime
  subject       String
  minutesStudied Int
  notes         String?  @db.Text
  createdAt     DateTime @default(now())
}

model ActivityLog {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  type       String
  referenceId String?
  details    Json?
  createdAt  DateTime @default(now())
}

model AggregatedStats {
  id           String   @id @default(uuid())
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
  date         DateTime
  totalMinutes Int      @default(0)
  postsCount   Int      @default(0)
  messagesCount Int     @default(0)
  createdAt    DateTime @default(now())
}

model RefreshToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  tokenHash  String
  expiresAt  DateTime
  revokedAt  DateTime?
  createdAt  DateTime @default(now())

  @@index([userId])
}

